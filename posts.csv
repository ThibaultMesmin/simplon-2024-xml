id,owner,group,parent,content,created_at,is_draft
1,1,,,"From the makers of `ruff` comes [`uv`](https://astral.sh/blog/uv)\n\n&gt; TL;DR: `uv` is an extremely fast Python package installer and resolver, written in Rust, and designed as a drop-in replacement for `pip` and `pip-tools` workflows.\n\nIt is also capable of replacing `virtualenv`.\n\nWith this announcement, the [`rye`](https://github.com/mitsuhiko/rye) project and package management solution created by u/mitsuhiko (creator of Flask, minijinja, and so much more) in Rust, will be maintained by the [astral](https://github.com/astral-sh/) team.\n\nThis \""merger\"" and announcement is all working toward the goal of a `Cargo`-type project and package management experience, but for Python.\n\nFor those of you who have big problems with the state of Python's package and project management, this is a great set of announcements...\n\nFor everyone else, there is https://xkcd.com/927/.\n\n- [Twitter Announcement](https://twitter.com/charliermarsh/status/1758216803275149389)\n- [PyPI](https://pypi.org/project/uv/)\n- [GitHub](https://github.com/astral-sh/uv)\n\nInstall it today:\n\n```\npip install uv\n# or\npipx install uv\n# or\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```",2025-04-01 12:39:22.389513,f
2,3,,,"Exciting to see, after many years, serious work in enabling multithreading that takes advantage of multiple CPUs in a more effective way in Python. One step at a time: https://github.com/python/cpython/pull/116338",2025-04-01 12:39:22.389513,f
3,5,,,I have been using python to code for almost 2 years and wanted to know what all IDEs people use ? So I can make a wise choice. TIA,2025-04-01 12:39:22.389513,f
4,2,,,Found a cool resource which explains the CLI tools hidden in the Python Standard Library.\n\nLink : [https://til.simonwillison.net/python/stdlib-cli-tools](https://til.simonwillison.net/python/stdlib-cli-tools),2025-04-01 12:39:22.389513,f
5,1,,,"```py\nclass Movable:\n    def __init__(self, x, y, dx, dy, worldwidth, worldheight):\n        #automatically sets the given arguments. Can be reused with any class that has an order of named args.\n        \n        nonmembers = [] #populate with names that should not become members and will be used later. In many simple classes, this can be left empty.\n        \n        for key, value in list(locals().items())[1:]: #exclude 'self', which is the first entry.\n            if not key in nonmembers:\n                setattr(self, key, value)\n    \n        #handle all nonmembers and assign other members:\n    \n        return\n```\nI always hate how redundant and bothersome it is to type ""self.member = member"" 10+ times, and this code does work the way I want it to. It's pretty readable in my opinion, especially with the documentation. That aside, is it considered acceptable practice in python? Will other developers get annoyed if I use it?\n\nEdit:  Thanks for the very fast replies. Data classes it is! I meant for this to be a discussion of code conventions, but since I learned about a completely new feature to me, I guess this post belongs in r/learpython.",2025-04-01 12:39:22.389513,t
6,1,,,"Exciting to see, after many years, serious work in enabling multithreading that takes advantage of multiple CPUs in a more effective way in Python. One step at a time: https://github.com/python/cpython/pull/116338",2025-04-01 12:39:22.389513,f
7,1,,6,Maybe use dataclasses?,2025-04-01 12:39:22.389513,f
8,5,,7,"Oh wow those are useful, good to know about them. But this implementation does allow me to have other parameters in the __init__ method that aren't directly members themselves and rather contribute to the calculation of other members. Do data classes allow this in some way?",2025-04-01 12:39:22.389513,f
9,2,,5,Thanks,2025-04-01 12:39:22.389513,f
10,1,1,,"Radion, an internet radio CLI client, written in Bash.",2025-04-01 12:39:22.389513,f
11,1,4,,,2025-04-01 12:39:22.389513,f
12,1,5,,Grosse faille de sécurité chez GCR cinéma !! Les utilisateurs ont fuités sur le web hier.,2025-04-01 12:39:22.389513,f
